{"version":3,"sources":["cce:/internal/x/prerequisite-imports"],"names":["requests","request","_err"],"mappings":";;;;;;AACA;AAEA,YAAM,CAAC,YAAY;AACf,cAAMA,QAAQ,GAAG,CAAC,uCAAD,EAAqG,uCAArG,EAA0M,uCAA1M,EAAkT,uCAAlT,EAAkZ,uCAAlZ,EAA8e,uCAA9e,EAAyoB,uCAAzoB,EAAyyB,uCAAzyB,EAA68B,uCAA78B,EAA8mC,uCAA9mC,EAAywC,wCAAzwC,CAAjB;;AACA,aAAK,MAAMC,OAAX,IAAsBD,QAAtB,EAAgC;AAC5B,cAAI;AACA,kBAAMC,OAAO,EAAb;AACH,WAFD,CAEE,OAAOC,IAAP,EAAa,CACX;AACH;AACJ;AACJ,OATK,GAAN","sourcesContent":["\n// Auto generated represents the prerequisite imports of project modules.\n\nawait (async () => {\n    const requests = [() => import(\"file:///C:/PROJECT/COCOS/SRC/2025/BLOCK_PUZZLE_SAGA/assets/script/gameDataClass.ts\"), () => import(\"file:///C:/PROJECT/COCOS/SRC/2025/BLOCK_PUZZLE_SAGA/assets/script/mainSceneClass.ts\"), () => import(\"file:///C:/PROJECT/COCOS/SRC/2025/BLOCK_PUZZLE_SAGA/assets/script/preloadSceneClass.ts\"), () => import(\"file:///C:/PROJECT/COCOS/SRC/2025/BLOCK_PUZZLE_SAGA/assets/script/rootScene.ts\"), () => import(\"file:///C:/PROJECT/COCOS/SRC/2025/BLOCK_PUZZLE_SAGA/assets/script/utils.ts\"), () => import(\"file:///C:/ProgramData/cocos/editors/Creator/3.8.7/resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-dof-pass.ts\"), () => import(\"file:///C:/ProgramData/cocos/editors/Creator/3.8.7/resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-pass.ts\"), () => import(\"file:///C:/ProgramData/cocos/editors/Creator/3.8.7/resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-settings.ts\"), () => import(\"file:///C:/ProgramData/cocos/editors/Creator/3.8.7/resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-types.ts\"), () => import(\"file:///C:/ProgramData/cocos/editors/Creator/3.8.7/resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline.ts\"), () => import(\"file:///C:/ProgramData/cocos/editors/Creator/3.8.7/resources/resources/3d/engine/editor/assets/tools/debug-view-runtime-control.ts\")];\n    for (const request of requests) {\n        try {\n            await request();\n        } catch (_err) {\n            // The error should have been caught by executor.\n        }\n    }\n})();\n    "]}